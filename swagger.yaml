# this is an example of the Uber API
# as a demonstration of an API spec in YAML
---
swagger: '2.0'
info:
  title: ElasticAuth Api 
  description: ElasticAuth is a passwordless authentication solution designed to be run on AWS
  version: "1.0.0"
host: auth-service-jgjfpv9gvy.elasticbeanstalk.com
schemes:
  - http
  - https
basePath: /
consumes:
  - application/json
produces:
  - application/json
paths:
  /accounts:
    get:
      tags:
        - Accounts
      description: Return accounts by email, username or ids
      operationId: findAccounts
      produces:
        - application/json
      parameters:
        - name: ids
          in: query
          description: ids of accounts to return
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: email
          in: query
          description: email address of account to return
          required: false
          type: string
        - name: username
          in: query
          description: username of account to return
          required: false
          type: string
        - name: fields
          in: query
          description: list of fields to include in account response
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        200:
          description: accounts response
          schema:
            $ref: '#/definitions/AccountsResponse'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Accounts
      description: Create a new account
      operationId: createAccount
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: account to create
          required: true
          schema:
            $ref: "#/definitions/NewAccount"
      responses:
        201:
          description: account created response
          schema:
            $ref: '#/definitions/CreateAccountResponse'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/Error'

  /accounts/{accountId}:
    get:
      tags:
        - Accounts
      description: Return account by Id
      operationId: getAccountById
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          description: Id of account to fetch
          required: true
          type: string
        - name: fields
          in: query
          description: list of fields to include in account response
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        200:
          description: accounts response
          schema:
            $ref: '#/definitions/AccountsResponse'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal error
          schema:
            $ref: '#/definitions/Error'

definitions:
  AccountResponse:
    properties:
      id:
        type: string
        format: uuid
      href:
        type: string
        format: url
      name:
        type: string
      username:
        type: string
      email:
        type: string
        format: email
      roles:
        type: array
        items:
          type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      metadata:
        type: object
        additionalProperties:
          type: string
      links:
        type: object
        additionalProperties:
          type: string

  TokenResponse:
    properties:
      href:
        type: string
        format: url
      access:
        type: string
      expires:
        type: integer
      type:
        type: string
      refresh:
        type: string
      cognitoId:
        type: string
      cognitoToken:
        type: string
      links:
        type: object

  AccountsResponse:
    properties:
      links:
        type: object
      accounts:
        type: array
        items:
          $ref: "#/definitions/AccountResponse"

  CreateAccountResponse:
    properties:
      links:
        type: object
      accounts:
        type: array
        items:
          $ref: "#/definitions/AccountResponse"
      linked:
        type: object
        properties:
          tokens:
            type: array
            items:
              $ref: "#/definitions/TokenResponse"

  NewAccount:
    required:
      - email
      - username
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      username:
        type: string
      email:
        type: string
        format: email
      metadata:
        type: object
        additionalProperties:
          type: string

  Error:
    required:
      - statusCode
      - error
      - message
    properties:
      statusCode:
        type: integer
        format: int32
      error:
        type: string
      message:
        type: string